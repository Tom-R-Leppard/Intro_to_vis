{
  "hash": "020bf45213d9bec9a6665cabb35f8781",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Summarising Data\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nhyb <- read.csv(file.choose())\n```\n:::\n\n\n\n\n\n\nIn order to visualise data, you need to understand it! A helpful tool in understanding your data is to produce summary statistics for your variables. Here, I will show you how to use R to produce these summary statistics that can help inform your decision-making when it comes to future analysis.\n\n1.  Numeric Data\n\nWith numeric data you are mostly concerned with measures of location and spread. Measures of location are statistics that demonstrate where the typical value is in the data set. Examples of these measures are mean and median. To do so, you can use the mean() or median() functions and select a numeric variable in the data set.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(hyb$msrp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31844.78\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(hyb$msrp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39193.82\n```\n\n\n:::\n:::\n\n\n\n\n\n\nMeasures of spread indicate how centralised your data set is. For these, you may wish to look at the standard deviation or a summary of your variable that includes the ranges and quartiles.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(hyb$msrp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  11849   24988   31845   39194   48815  118544 \n```\n\n\n:::\n\n```{.r .cell-code}\nsd(hyb$msrp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21407.84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrp <- data.frame(\n  mean = mean(hyb$msrp),\n  sd = sd(hyb$msrp)\n)\n\nprint(msrp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mean       sd\n1 39193.82 21407.84\n```\n\n\n:::\n:::\n\n\n\n\n\n\n2.  Categorical Data Categorical data are a little bit different. You don't want a mean or standard deviation, rather you want to know the frequency or proportion of the whole data set fits into each category. You can use the\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create table\nclass_tab <- table(hyb$class)\n\n# Turn into a clean data frame\nclass_df <- data.frame(\n  class = names(class_tab),\n  count = as.vector(class_tab),\n  proportion = round(as.vector(prop.table(class_tab)), 1)\n)\n\nprint(class_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  class count proportion\n1     C    32        0.2\n2     L     8        0.1\n3     M    56        0.4\n4    MV     4        0.0\n5    PT     6        0.0\n6   SUV    39        0.3\n7    TS     9        0.1\n```\n\n\n:::\n:::\n\n\n\n\n\n\nVery good! Right, let's get visualising some summaries.\n\n## Visualising Summaries\n\nOne of the most useful data visualisations for any data scientist summarises your data! You can learn a lot about your data by seeing how it is distributed. Additionally, you can present a lot of information to others in these types of visualisations.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr) # we use this to filter the data\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Histograms and Density Plots\n\nthe most basic plots for summarising a continuous variable in your dataset are histograms and density plots.\n\n**USES:**\n\n1.  View the distribution of a variable.\n\n2.  Identify skewness and outliers in the data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = msrp)) +\ngeom_histogram() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nA histogram presents a count on the Y axis of the graph. It separates the variable you place on the X axis into 'bins' of a reasonable size to present the data. Think of this as a count of the number of cars within certain mini price ranges (intervals). These intervals are known as the bins that histogram creates. Basically, R chops up the X axis variable into equal width intervals to present in the graph.\n\nHistograms are useful to quickly present the distribution of the data. The distribution means how many observations are present at every point along the range of the X axis. High points of a histogram represent many observations at that point while low points represent fewer observations at that point of the X axis. So, a histogram shows the absolute volume of the variable.\n\nAdditionally, think about the 'tails' of the histogram. Is the peak to one side or right in the middle? This is a visual representation of the skewness of the variable. If there is a tail to the right, we call it right skewed, meaning that very few observations are represented at the top-end of the range. The inverse is true for a left-skewed distribution.\n\n**What does this histogram tell you about the prices variable in this data set?**\n\nA density plot is a variation of a histogram that shows the distribution of a continuous variable. Like a histogram, it helps visualize features such as skewness, spread, and central tendency.\n\nHowever, the key difference is in the y-axis:\n\n1.  A histogram displays counts — the number of observations in each bin.\n\n2.  A density plot displays probability density — which shows how likely it is that a value falls near a given point on the x-axis.\n\nIn a density plot, the area under the curve sums to 1 (or 100%), representing the total probability across the full range of the variable. This makes density plots especially useful for comparing distributions across groups, even if the sample sizes differ.\n\nWhile the shape of a density plot often mirrors that of a histogram, the height of the density curve is not the raw count, but the relative likelihood of observing a value in a small interval.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = msrp)) +\ngeom_density(color = \"firebrick1\", fill = \"firebrick1\")\n```\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nYou can also add a mean line to either a histogram or density plot by using the vline() option. Take a look at the code below.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = msrp)) +\ngeom_density(color = \"firebrick1\", fill = \"firebrick1\") + \ngeom_vline(aes(xintercept = mean(msrp, na.rm = TRUE)),         color = \"black\", linetype = \"dashed\", linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nFurthermore, you can combine the density line with the histogram. However, because the density plot requires the density not count on the Y axis, you must alter the Y axis option in the ggplot() to represent this.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = msrp)) +\n  geom_histogram(aes(y = after_stat(density)), binwidth = 2000, fill = \"lightblue\") +\n  geom_density(color = \"red\")\n```\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNote that the histogram measures are higher than the density curve but the pattern is roughly the same? That is indicative of the differences in how they are measured (count vs. density).\n\n## Box Plots\n\nNext, we can use box to present even more information about our data. These both represent the relationship between two variables, usually one categorical and another continuous. Box plots provide a mini number summary for a specific category within the data set.\n\n**USES:**\n\n1.  Box plots show a summary of statistics of a variable.\n2.  Identify outliers\n3.  Compare distributions across categories\n\nSince these plots are not as intuitive as a histogram showing a count, let's visualise one and discuss what it represents before moving on to more complicated visualisations.\n\nIn hybrid car data set there is a variable that identifies the class of car (e.g. SUV). We might want to describe the distribution of price for SUVs using a box plot. The chunk below generates a box plot using ggplot() but only presents the class \"SUV\" by using dplry pakcage's filter() function.\n\nFiltering is a great way to reduce your data set quickly by a category. For example, if you wanted a separate data set with only SUVs, you could use the filter() function.\n\nBack to our box plot. The box itself highlights the middle 50% of the data — this is called the interquartile range (IQR). The bottom and top edges of the box represent the 25th and 75th percentiles, respectively, while the line inside the box shows the median (the 50th percentile). The \"whiskers\" extend from the box to the smallest and largest values that fall within 1.5 times the IQR. Any points beyond the whiskers are typically considered outliers and are shown as individual dots. In this case, the boxplot shows how SUV prices are spread out, with the box capturing the typical price range and the median line indicating the midpoint of those prices.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = class, y = msrp)) +\n  geom_boxplot(data = dplyr::filter(hyb, class == \"SUV\"))\n```\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nA strength of box is to show multiple groups on one plot so that you can compare the distributions across these categories. Take a look at the box plot number summaries of price by each class of car.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hyb, aes(x = class, y = msrp, color = class)) +\ngeom_boxplot() \n```\n\n::: {.cell-output-display}\n![](Summarising-Data_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n**What stories can you tell about these cars from this visualisation?**\n\n## Activities\n\n### 6.9\n\n-   Violin Plots\n\n### 6.10\n\n-   Dot plots\n\n### 6.1.3\n\n-   Options for histograms\n\n### 6.6.3\n\n-   Options for density curves\n\n### 6.6.3\n\n-   Options for boxplots\n",
    "supporting": [
      "Summarising-Data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}