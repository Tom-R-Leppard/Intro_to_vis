---
title: "Data Types and Structures"
format: html
---

## Data in R

In R, you can work with many different types of data including but not limited to data frames, lists, vectors, and matrices. For the purposes of our course, we are going to be working mostly with data frames. A data frame is a tabular data structure with observations in the rows and variables in the columns. Each of these variables might be stored within the data frame as different levels of data. There are a few tricks in R to identify and change the level of data.

Follow each chunk to examine the a data set.

```{r}
hyb <- read.csv(file.choose()) # choose hybrid.csv}
```

First, you can take a look at the data set using a few different functions. Follow the logic in the next chunk to inspect the data.

```{r}
hyb # call the object you created to see the whole data set.  
head(hyb, 5) # Take a look at the first 5 observations in the set (you can set the number) 

tail(hyb, 10) # Look at the last 10 observations (you can set the number)
```

So, we have quite a few numeric and categorical variables here. We need to know how each of these variables are stored in this data set so we know how to work with them. The following chunk uses the str() function to take a look at how this data set is structured.

```{r}
str(hyb)
```

Starting from the top right, we have a data.frame (a type of data structure) that has 154 observations (the rows) with 9 variables (columns). under this line is an explanation of each of the 9 variables. From left to right, we have the name of the variable, the type, then a short example of the data stored therein. For example, we have an 'id variable' stored as an integer (int) which. The "model" variable is stored as a character (chr) variable which indicates that it is stored as text (also known as a string). There is one more variable class you should know which is factor. While characters are text, factors are categories with a set number of possible values.

Notice the \$? The \$ is an operator used in R to access different elements in an object. This comes in handy when we want to work with the data and transform it. For example, we may wish to view certain elements of this data frame. Follow the logic in the following chunk.

```{r}
class(hyb$id) # identify the class of data using class()

hyb$id_chr <- as.character(hyb$id) # change a variable to a character create a new variable with that. 

class(hyb$id_chr)
```

One final thing to note when working with character data is that often you need to convert characters into factors so that R recognises the long list of text as being truly categorical. This actually encodes each unique character as a distinct category recognising all with the same text as sharing a category.

For example, the variable 'class' is actually categorical. What type of car it is. It is, however, stored as a character. In order to do anything with this variables (say visualising average cost by each category?), we need to convert this into a factor.

```{r}
hyb$class <- as.factor(hyb$class)

class(hyb$class)
```

Keep this trick in your pocket! You are likely going to need this throughout the semester!

## Levels of Data

Within a data set you will encounter different variables that are measures at various levels and using different units of measurement. Let's say, for example, you have some survey data that asks questions about the respondent's biological sex, income, and how satisfied they are are work. All of these questions are useful, and can be useful in visualisation. However, there are some visualisations that are more appropriate and useful for some of these more than others. In order to properly visualise data, we need to understand data.

There are two main 'umbrella' terms that you can use when talking about data. These are, **categorical** and **numeric**. Categorical data, as the name suggests, are measured in buckets or categories while numeric data use units and numbers. There are a few further distinctions you need to understand before these become useful to you.

+------------------------------------------------------------------------------------------------------------------------------------------+
| Categorical Data                                                                                                                         |
+==========================================================================================================================================+
| Nominal: These are data with distinct labels that have no quantitative difference between one another.                                   |
|                                                                                                                                          |
| E.g. Sex (Male, Female). Race (White, Black, Other).                                                                                     |
+------------------------------------------------------------------------------------------------------------------------------------------+
| Ordinal: These are data with set differences between each response. These are categorical responses that are ranked in a specific order. |
|                                                                                                                                          |
| E.g. Likert Scale (Agree, Neutral, Disagree).                                                                                            |
+------------------------------------------------------------------------------------------------------------------------------------------+

There are some other variations of categorical data that are sometimes referred to such as dummy variables (true or false, or 0/1). So, an honorable mention goes to dummy variables!!

Categorical data will almost always be stored as characters or factors. Alternatively, you might come across encoded versions of categorical data. For example, male and female may be given a numeric code but, we know this to be categorical. So, you must decide what to do. You may want to convert this to a categorical variable, or simply remember what 1 and 0 mean.

Since there are distinct buckets of information that are stored in categorical data, it is best presented using tables, bar charts or pie charts.

+-------------------------------------------------------------------------------------------+
| Numeric Data                                                                              |
+===========================================================================================+
| Interval: Continuous data that do not have a zero point.                                  |
|                                                                                           |
| E.g. Temperature (measured in Farenheit), Time (measured on a 12-hour clock, ACT scores). |
+-------------------------------------------------------------------------------------------+
| Ratio: Continuous data that have a true zero point.                                       |
|                                                                                           |
| E.g. Earnings (dollar amount), Age (measured in years).                                   |
+-------------------------------------------------------------------------------------------+

Numeric data all have equal intervals (i.e. one decimal place, or one year, or one degree) which creates a continuous stream of data.

In R, numeric data is stored as integer (int) or numeric (num). You may come across data that should be numeric but is stored as categorical or perhaps a character.

### Activity - Levels of Data

Look at the following examples of questions and, with a partner, decide whether the unit of measurement is nominal, ordinal, interval or ratio.

1.  Please indicate how much you earn a year from your current job: - \$0 - \$24,999

```         
-   $25,000 - $49,999

-   $50,000 - $74,999

-   $75,000 - $99,999

-   $100,000+
```

2.  How much do you earn at your current job (in USD): \_\_\_\_\_\_\_\_\_\_\_\_\_

3.  How likely are you to recommend this product?:

    1.  Likely
    2.  Neutral
    3.  Unlikely
