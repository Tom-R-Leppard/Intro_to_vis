[
  {
    "objectID": "Summarising Data.html",
    "href": "Summarising Data.html",
    "title": "2  Summarising Data",
    "section": "",
    "text": "2.1 Visualising Summaries\nIn order to visualise data, you need to understand it! A helpful tool in understanding your data is to produce summary statistics for your variables. Here, I will show you how to use R to produce these summary statistics that can help inform your decision-making when it comes to future analysis.\nWith numeric data you are mostly concerned with measures of location and spread. Measures of location are statistics that demonstrate where the typical value is in the data set. Examples of these measures are mean and median. To do so, you can use the mean() or median() functions and select a numeric variable in the data set.\nMeasures of spread indicate how centralised your data set is. For these, you may wish to look at the standard deviation or a summary of your variable that includes the ranges and quartiles.\nVery good! Right, let’s get visualising some summaries.\nOne of the most useful data visualisations for any data scientist summarises your data! You can learn a lot about your data by seeing how it is distributed. Additionally, you can present a lot of information to others in these types of visualisations.\nlibrary(ggplot2)\nlibrary(dplyr) # we use this to filter the data\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summarising Data</span>"
    ]
  },
  {
    "objectID": "Summarising Data.html#histograms-and-density-plots",
    "href": "Summarising Data.html#histograms-and-density-plots",
    "title": "2  Summarising Data",
    "section": "2.2 Histograms and Density Plots",
    "text": "2.2 Histograms and Density Plots\nthe most basic plots for summarising a continuous variable in your dataset are histograms and density plots.\nUSES:\n\nView the distribution of a variable.\nIdentify skewness and outliers in the data\n\n\nggplot(hyb, aes(x = msrp)) +\ngeom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nA histogram presents a count on the Y axis of the graph. It separates the variable you place on the X axis into ‘bins’ of a reasonable size to present the data. Think of this as a count of the number of cars within certain mini price ranges (intervals). These intervals are known as the bins that histogram creates. Basically, R chops up the X axis variable into equal width intervals to present in the graph.\nHistograms are useful to quickly present the distribution of the data. The distribution means how many observations are present at every point along the range of the X axis. High points of a histogram represent many observations at that point while low points represent fewer observations at that point of the X axis. So, a histogram shows the absolute volume of the variable.\nAdditionally, think about the ‘tails’ of the histogram. Is the peak to one side or right in the middle? This is a visual representation of the skewness of the variable. If there is a tail to the right, we call it right skewed, meaning that very few observations are represented at the top-end of the range. The inverse is true for a left-skewed distribution.\nWhat does this histogram tell you about the prices variable in this data set?\nA density plot is a variation of a histogram that shows the distribution of a continuous variable. Like a histogram, it helps visualize features such as skewness, spread, and central tendency.\nHowever, the key difference is in the y-axis:\n\nA histogram displays counts — the number of observations in each bin.\nA density plot displays probability density — which shows how likely it is that a value falls near a given point on the x-axis.\n\nIn a density plot, the area under the curve sums to 1 (or 100%), representing the total probability across the full range of the variable. This makes density plots especially useful for comparing distributions across groups, even if the sample sizes differ.\nWhile the shape of a density plot often mirrors that of a histogram, the height of the density curve is not the raw count, but the relative likelihood of observing a value in a small interval.\n\nggplot(hyb, aes(x = msrp)) +\ngeom_density(color = \"firebrick1\", fill = \"firebrick1\")\n\n\n\n\n\n\n\n\nYou can also add a mean line to either a histogram or density plot by using the vline() option. Take a look at the code below.\n\nggplot(hyb, aes(x = msrp)) +\ngeom_density(color = \"firebrick1\", fill = \"firebrick1\") + \ngeom_vline(aes(xintercept = mean(msrp, na.rm = TRUE)),         color = \"black\", linetype = \"dashed\", linewidth = 1)\n\n\n\n\n\n\n\n\nFurthermore, you can combine the density line with the histogram. However, because the density plot requires the density not count on the Y axis, you must alter the Y axis option in the ggplot() to represent this.\n\nggplot(hyb, aes(x = msrp)) +\n  geom_histogram(aes(y = after_stat(density)), binwidth = 2000, fill = \"lightblue\") +\n  geom_density(color = \"red\")\n\n\n\n\n\n\n\n\nNote that the histogram measures are higher than the density curve but the pattern is roughly the same? That is indicative of the differences in how they are measured (count vs. density).",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summarising Data</span>"
    ]
  },
  {
    "objectID": "Summarising Data.html#box-plots",
    "href": "Summarising Data.html#box-plots",
    "title": "2  Summarising Data",
    "section": "2.3 Box Plots",
    "text": "2.3 Box Plots\nNext, we can use box to present even more information about our data. These both represent the relationship between two variables, usually one categorical and another continuous. Box plots provide a mini number summary for a specific category within the data set.\nUSES:\n\nBox plots show a summary of statistics of a variable.\nIdentify outliers\nCompare distributions across categories\n\nSince these plots are not as intuitive as a histogram showing a count, let’s visualise one and discuss what it represents before moving on to more complicated visualisations.\nIn hybrid car data set there is a variable that identifies the class of car (e.g. SUV). We might want to describe the distribution of price for SUVs using a box plot. The chunk below generates a box plot using ggplot() but only presents the class “SUV” by using dplry pakcage’s filter() function.\nFiltering is a great way to reduce your data set quickly by a category. For example, if you wanted a separate data set with only SUVs, you could use the filter() function.\nBack to our box plot. The box itself highlights the middle 50% of the data — this is called the interquartile range (IQR). The bottom and top edges of the box represent the 25th and 75th percentiles, respectively, while the line inside the box shows the median (the 50th percentile). The “whiskers” extend from the box to the smallest and largest values that fall within 1.5 times the IQR. Any points beyond the whiskers are typically considered outliers and are shown as individual dots. In this case, the boxplot shows how SUV prices are spread out, with the box capturing the typical price range and the median line indicating the midpoint of those prices.\n\nggplot(hyb, aes(x = class, y = msrp)) +\n  geom_boxplot(data = dplyr::filter(hyb, class == \"SUV\"))\n\n\n\n\n\n\n\n\nA strength of box is to show multiple groups on one plot so that you can compare the distributions across these categories. Take a look at the box plot number summaries of price by each class of car.\n\nggplot(hyb, aes(x = class, y = msrp, color = class)) +\ngeom_boxplot() \n\n\n\n\n\n\n\n\nWhat stories can you tell about these cars from this visualisation?",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summarising Data</span>"
    ]
  },
  {
    "objectID": "Summarising Data.html#activities",
    "href": "Summarising Data.html#activities",
    "title": "2  Summarising Data",
    "section": "2.4 Activities",
    "text": "2.4 Activities\n\n2.4.1 6.9\n\nViolin Plots\n\n\n\n2.4.2 6.10\n\nDot plots\n\n\n\n2.4.3 6.1.3\n\nOptions for histograms\n\n\n\n2.4.4 6.6.3\n\nOptions for density curves\n\n\n\n2.4.5 6.6.3\n\nOptions for boxplots",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summarising Data</span>"
    ]
  },
  {
    "objectID": "Data Types and Structures.html",
    "href": "Data Types and Structures.html",
    "title": "1  Data Types and Structures",
    "section": "",
    "text": "1.1 Data in R\nIn R, you can work with many different types of data including but not limited to data frames, lists, vectors, and matrices. For the purposes of our course, we are going to be working mostly with data frames. A data frame is a tabular data structure with observations in the rows and variables in the columns. Each of these variables might be stored within the data frame as different levels of data. There are a few tricks in R to identify and change the level of data.\nFollow each chunk to examine the a data set.\nhyb &lt;- read.csv(file.choose()) # choose hybrid.csv}\nFirst, you can take a look at the data set using a few different functions. Follow the logic in the next chunk to inspect the data.\nhyb # call the object you created to see the whole data set.  \n\n     id                        model year      msrp msrp_dollars accel_rate\n1     1             Prius (1st gen.) 1997  24509.74  $24,509.74        7.46\n2     2                  Tino Hybrid 2000  35354.97  $35,354.97        8.20\n3     3             Prius (2nd gen.) 2000  26832.25  $26,832.25        7.97\n4     4                      Insight 2000  18936.41  $18,936.41        9.52\n5     5        Civic Hybrid 1st gen. 2001  25833.38  $25,833.38        7.04\n6     6                      Insight 2001  19036.71  $19,036.71        9.52\n7     7                      Insight 2002  19137.01  $19,137.01        9.71\n8     8               Alphard Hybrid 2003  38084.77  $38,084.77        8.33\n9     9                      Insight 2003  19137.01  $19,137.01        9.52\n10   10                 Civic Hybrid 2003  14071.92  $14,071.92        8.62\n11   11                Escape Hybrid 2004  36676.10  $36,676.10       10.32\n12   12                      Insight 2004  19237.31  $19,237.31        9.35\n13   13                        Prius 2004  20355.64  $20,355.64        9.90\n14   14      Silverado 15 Hybrid 2WD 2004  30089.64  $30,089.64        9.09\n15   15                 Lexus RX400h 2005  58521.14  $58,521.14       12.76\n16   16        Civic Hybrid 2nd gen. 2005  26354.44  $26,354.44        7.63\n17   17            Highlander Hybrid 2005  29186.21  $29,186.21       12.76\n18   18                      Insight 2005  19387.76  $19,387.76        9.71\n19   19                 Civic Hybrid 2005  18236.33  $18,236.33        8.26\n20   20            Escape Hybrid 2WD 2005  19322.56  $19,322.56        9.52\n21   21                Accord Hybrid 2005  16343.69  $16,343.69       14.93\n22   22      Silverado 15 Hybrid 2WD 2005  32647.26  $32,647.26       11.11\n23   23       Mercury Mariner Hybrid 2006  34772.40  $34,772.40        8.98\n24   24                 Camry Hybrid 2006  29853.25  $29,853.25       11.28\n25   25                 Lexus GS450h 2006  64547.56  $64,547.56       18.65\n26   26                Estima Hybrid 2006  36012.70  $36,012.70        9.26\n27   27                Altima Hybrid 2006  29524.75  $29,524.75       13.29\n28   28       Chevrolet Tahoe Hybrid 2007  42924.35  $42,924.35       10.91\n29   29                Kluger Hybrid 2007  46229.48  $46,229.48       12.76\n30   30              Lexus LS600h/hL 2007 118543.60 $118,543.60       17.54\n31   31               Tribute Hybrid 2007  24823.83  $24,823.83       11.28\n32   32             GMC Yukon Hybrid 2007  57094.81  $57,094.81       12.28\n33   33                  Aura Hybrid 2007  22110.87  $22,110.87       10.87\n34   34                   Vue Hybrid 2007  22938.33  $22,938.33       10.75\n35   35      Silverado 15 Hybrid 2WD 2007  34653.23  $34,653.23       11.49\n36   36                 Crown Hybrid 2008  62290.38  $62,290.38        8.70\n37   37     Cadillac Escalade Hybrid 2008  78932.81  $78,932.81        9.09\n38   38                         F3DM 2008  23744.06  $23,744.06        9.52\n39   39                Altima Hybrid 2008  18675.63  $18,675.63       13.70\n40   40                       A5 BSG 2009  11849.43  $11,849.43        7.87\n41   41                 Lexus RX450h 2009  46233.36  $46,233.36       13.47\n42   42                ML450 Blue HV 2009  60519.83  $60,519.83       12.60\n43   43             Prius (3rd gen.) 2009  24641.18  $24,641.18        9.60\n44   44      S400 Hybrid/Hybrid Long 2009  96208.93  $96,208.93       13.89\n45   45         Mercury Milan Hybrid 2009  30522.57  $30,522.57       11.55\n46   46                 Lexus HS250h 2009  38478.15  $38,478.15       11.55\n47   47           Avante/Elantra LPI 2009  21872.71  $21,872.71       10.21\n48   48              ActiveHybrid X6 2009  97237.90  $97,237.90       17.96\n49   49                          SAI 2009  39172.44  $39,172.44       11.55\n50   50                Malibu Hybrid 2009  24768.79  $24,768.79        9.09\n51   51                   Vue Hybrid 2009  26408.67  $26,408.67       13.70\n52   52                    Aspen HEV 2009  44903.77  $44,903.77       13.51\n53   53                      Durango 2009  41033.24  $41,033.24        8.33\n54   54                    Auris HSD 2010  35787.29  $35,787.29        8.85\n55   55                         CR-Z 2010  21435.54  $21,435.54        9.24\n56   56                    F3DM PHEV 2010  23124.59  $23,124.59        9.24\n57   57                   Touareg HV 2010  64198.95  $64,198.95       15.38\n58   58                      Audi Q5 2010  37510.86  $37,510.86       14.08\n59   59              Jeep Patriot EV 2010  17045.06  $17,045.06       12.05\n60   60                  Besturn B50 2010  14586.61  $14,586.61        7.14\n61   61        ActiveHybrid 7 Series 2010 104300.43 $104,300.43       20.41\n62   62           Lincoln MKZ Hybrid 2010  37036.64  $37,036.64       11.15\n63   63              Fit/Jazz Hybrid 2010  16911.85  $16,911.85        8.26\n64   64                    Sonata HV 2010  28287.66  $28,287.66       14.70\n65   65                 Cayenne S HV 2010  73183.47  $73,183.47       14.71\n66   66                      Insight 2010  19859.16  $19,859.16        9.17\n67   67    Fuga Hybrid/Infiniti M35h 2010  70157.02  $70,157.02       18.65\n68   68               Chevrolet Volt 2010  42924.35  $42,924.35       10.78\n69   69           Tribute Hybrid 4WD 2010  27968.32  $27,968.32       12.35\n70   70            Fusion Hybrid FWD 2010  28033.51  $28,033.51       11.49\n71   71                      HS 250h 2010  34753.53  $34,753.53       11.76\n72   72           Mariner Hybrid FWD 2010  30194.95  $30,194.95       11.63\n73   73                      RX 450h 2010  42812.54  $42,812.54       13.89\n74   74          ML450 Hybrid 4natic 2010  55164.33  $55,164.33       12.99\n75   75      Silverado 15 Hybrid 2WD 2010  38454.56  $38,454.56       11.76\n76   76                  S400 Hybrid 2010  88212.78  $88,212.78       12.99\n77   77                         Aqua 2011  22850.87  $22,850.87        9.35\n78   78                 Lexus CT200h 2011  30082.16  $30,082.16        9.71\n79   79         Civic Hybrid 3rd gen 2011  24999.59  $24,999.59        9.60\n80   80              Prius alpha (V) 2011  30588.35  $30,588.35       10.00\n81   81                 3008 Hybrid4 2011  45101.54  $45,101.54       11.36\n82   82           Fit Shuttle Hybrid 2011  16394.36  $16,394.36        7.52\n83   83          Buick Regal eAssist 2011  27948.93  $27,948.93       12.05\n84   84                      Prius V 2011  27272.28  $27,272.28        9.51\n85   85     Freed/Freed Spike Hybrid 2011  27972.07  $27,972.07        6.29\n86   86                 Optima K5 HV 2011  26549.16  $26,549.16       10.54\n87   87            Escape Hybrid FWD 2011  30661.34  $30,661.34       12.35\n88   88                      Insight 2011  18254.38  $18,254.38        9.52\n89   89               MKZ Hybrid FWD 2011  34748.52  $34,748.52       11.49\n90   90                         CR-Z 2011  19402.80  $19,402.80       12.20\n91   91                Sonata Hybrid 2011  25872.07  $25,872.07       11.90\n92   92                 Camry Hybrid 2011  27130.82  $27,130.82       13.89\n93   93           Tribute Hybrid 2WD 2011  26213.09  $26,213.09       12.50\n94   94             Cayenne S Hybrid 2011  67902.28  $67,902.28       18.52\n95   95               Touareg Hybrid 2011  50149.39  $50,149.39       16.13\n96   96              ActiveHybrid 7i 2011 102605.66 $102,605.66       18.18\n97   97                      Prius C 2012  19006.62  $19,006.62        9.35\n98   98                    Prius PHV 2012  32095.61  $32,095.61        8.82\n99   99                       Ampera 2012  31739.55  $31,739.55       11.11\n100 100        ActiveHybrid 5 Series 2012  62180.23  $62,180.23       16.67\n101 101                 Lexus GS450h 2012  59126.14  $59,126.14       16.95\n102 102                      Insight 2012  18555.28  $18,555.28        9.42\n103 103               Chevrolet Volt 2012  39261.96  $39,261.96       11.11\n104 104              Camry Hybrid LE 2012  26067.66  $26,067.66       13.16\n105 105               MKZ Hybrid FWD 2012  34858.84  $34,858.84       11.49\n106 106                         M35h 2012  53860.45  $53,860.45       19.23\n107 107             LaCrosse eAssist 2012  30049.52  $30,049.52       11.36\n108 108        ActiveHybrid 5 Series 2012  61132.11  $61,132.11       17.54\n109 109            Panamera S Hybrid 2012  95283.85  $95,283.85       17.54\n110 110        Yukon 1500 Hybrid 2WD 2012  52626.77  $52,626.77       13.50\n111 111                      Prius C 2013  19080.00  $19,080.00        8.70\n112 112                 Jetta Hybrid 2013  24995.00  $24,995.00       12.66\n113 113                 Civic Hybrid 2013  24360.00  $24,360.00       10.20\n114 114                        Prius 2013  24200.00  $24,200.00       10.20\n115 115            Fusion Hybrid FWD 2013  27200.00  $27,200.00       11.72\n116 116             C-Max Hybrid FWD 2013  25200.00  $25,200.00       12.35\n117 117                      Insight 2013  18600.00  $18,600.00       11.76\n118 118              Camry Hybrid LE 2013  26140.00  $26,140.00       13.51\n119 119            Camry Hybrid LXLE 2013  27670.00  $27,670.00       13.33\n120 120                Sonata Hybrid 2013  25650.00  $25,650.00       11.76\n121 121                Optima Hybrid 2013  25900.00  $25,900.00       11.63\n122 122        Sonata Hybrid Limited 2013  30550.00  $30,550.00       11.76\n123 123             Optima Hybrid EX 2013  31950.00  $31,950.00       11.36\n124 124               Malibu eAssist 2013  24985.00  $24,985.00       11.49\n125 125             LaCrosse eAssist 2013  31660.00  $31,660.00       11.36\n126 126                Regal eAssist 2013  29015.00  $29,015.00       12.20\n127 127                      RX 450h 2013  46310.00  $46,310.00       12.99\n128 128        Highlander Hybrid 4WD 2013  40170.00  $40,170.00       13.89\n129 129                    Q5 Hybrid 2013  50900.00  $50,900.00       14.71\n130 130             Cayenne S Hybrid 2013  69850.00  $69,850.00       16.39\n131 131               Touareg Hybrid 2013  62575.00  $62,575.00       16.13\n132 132          Escalade Hybrid 2WD 2013  74425.00  $74,425.00       11.63\n133 133             Tahoe Hybrid 2WD 2013  53620.00  $53,620.00       11.90\n134 134        Yukon 1500 Hybrid 2WD 2013  54145.00  $54,145.00       11.88\n135 135        Yukon 1500 Hybrid 4WD 2013  61960.00  $61,960.00       13.33\n136 136                         CR-Z 2013  19975.00  $19,975.00       11.11\n137 137               MKZ Hybrid FWD 2013  35925.00  $35,925.00       14.03\n138 138                      CT 200h 2013  32050.00  $32,050.00       10.31\n139 139                      ES 300h 2013  39250.00  $39,250.00       12.35\n140 140                   ILX Hybrid 2013  28900.00  $28,900.00        9.26\n141 141               ActiveHybrid 3 2013  49650.00  $49,650.00       14.93\n142 142      Silverado 15 Hybrid 2WD 2013  41135.00  $41,135.00       12.35\n143 143         Sierra 15 Hybrid 2WD 2013  41555.00  $41,555.00       10.00\n144 144                      GS 450h 2013  59450.00  $59,450.00       16.67\n145 145                         M35h 2013  54750.00  $54,750.00       19.61\n146 146                  E400 Hybrid 2013  55800.00  $55,800.00       14.93\n147 147        ActiveHybrid 5 Series 2013  61400.00  $61,400.00       12.99\n148 148              ActiveHybrid 7L 2013  84300.00  $84,300.00       18.18\n149 149            Panamera S Hybrid 2013  96150.00  $96,150.00       18.52\n150 150                  S400 Hybrid 2013  92350.00  $92,350.00       13.89\n151 151         Prius Plug-in Hybrid 2013  32000.00  $32,000.00        9.17\n152 152  C-Max Energi Plug-in Hybrid 2013  32950.00  $32,950.00       11.76\n153 153 Fusion Energi Plug-in Hybrid 2013  38700.00  $38,700.00       11.76\n154 154               Chevrolet Volt 2013  39145.00  $39,145.00       11.11\n      mpg mpg_mpge class\n1   41.26    41.26     C\n2   54.10    54.10     C\n3   45.23    45.23     C\n4   53.00    53.00    TS\n5   47.04    47.04     C\n6   53.00    53.00    TS\n7   53.00    53.00    TS\n8   40.46    40.46    MV\n9   53.00    53.00    TS\n10  41.00    41.00     C\n11  31.99    31.99   SUV\n12  52.00    52.00    TS\n13  46.00    46.00     M\n14  17.00    17.00    PT\n15  28.23    28.23   SUV\n16  39.99    39.99     C\n17  29.40    29.40   SUV\n18  52.00    52.00    TS\n19  41.00    41.00     C\n20  29.00    29.00   SUV\n21  28.00    28.00     M\n22  17.00    17.00    PT\n23  32.93    32.93   SUV\n24  33.64    33.64     M\n25  33.40    33.40     M\n26  47.04    47.04    MV\n27  32.93    32.93     M\n28  22.35    22.35   SUV\n29  25.87    25.87   SUV\n30  21.00    21.00     M\n31  31.75    31.75   SUV\n32  21.78    21.78   SUV\n33  27.00    27.00     M\n34  26.00    26.00   SUV\n35  17.00    17.00    PT\n36  37.16    37.16     M\n37  22.35    22.35   SUV\n38  30.11    85.00     M\n39  34.00    34.00     M\n40  35.28    35.28     M\n41  31.99    31.99   SUV\n42  23.99    23.99   SUV\n43  47.98    47.98     C\n44  26.34    26.34     L\n45  40.69    40.69     M\n46  54.10    54.10     C\n47  41.87    41.87     C\n48  18.82    18.82   SUV\n49  54.10    54.10     M\n50  29.00    29.00     M\n51  28.00    28.00   SUV\n52  21.00    21.00   SUV\n53  21.00    21.00   SUV\n54  68.21    68.21     C\n55  37.00    37.00    TS\n56  30.15    85.00     M\n57  28.70    28.70   SUV\n58  33.64    33.64   SUV\n59  29.40    38.00   SUV\n60  31.28    31.28     M\n61  22.11    22.11     L\n62  37.63    37.63     M\n63  30.00    30.00     C\n64  37.00    37.00     M\n65  26.11    26.11   SUV\n66  41.00    41.00     C\n67  33.64    33.64     M\n68  35.00    93.00     C\n69  29.00    29.00   SUV\n70  39.00    39.00     M\n71  35.00    35.00     C\n72  32.00    32.00   SUV\n73  30.00    30.00   SUV\n74  22.00    22.00   SUV\n75  22.00    22.00    PT\n76  21.00    21.00     L\n77  50.00    50.00     C\n78  42.00    42.00     C\n79  44.36    44.36     C\n80  72.92    72.92     M\n81  61.16    61.16     C\n82  58.80    58.80    MV\n83  25.99    25.99     M\n84  32.93    32.93     M\n85  50.81    50.81    MV\n86  36.00    36.00     M\n87  32.00    32.00   SUV\n88  41.00    41.00     C\n89  39.00    39.00     M\n90  37.00    37.00    TS\n91  36.00    36.00     M\n92  33.00    33.00     M\n93  32.00    32.00   SUV\n94  21.00    21.00   SUV\n95  21.00    21.00   SUV\n96  20.00    20.00     M\n97  50.00    50.00     C\n98  50.00    95.00     M\n99  37.00    98.00     C\n100 26.00    26.00     M\n101 31.00    31.00     M\n102 42.00    42.00     C\n103 37.00    94.00     C\n104 41.00    41.00     M\n105 39.00    39.00     M\n106 29.00    29.00     M\n107 29.00    29.00     M\n108 26.00    26.00     M\n109 25.00    25.00     L\n110 21.00    21.00   SUV\n111 50.00    50.00     C\n112 45.00    45.00     C\n113 44.00    44.00     C\n114 50.00    50.00     M\n115 47.00    47.00     M\n116 43.00    43.00     L\n117 42.00    42.00     C\n118 41.00    41.00     M\n119 40.00    40.00     M\n120 38.00    38.00     M\n121 38.00    38.00     M\n122 37.00    37.00     M\n123 37.00    37.00     M\n124 29.00    29.00     M\n125 29.00    29.00     M\n126 29.00    29.00     M\n127 30.00    30.00   SUV\n128 28.00    28.00   SUV\n129 26.00    26.00   SUV\n130 21.00    21.00   SUV\n131 21.00    21.00   SUV\n132 21.00    21.00   SUV\n133 21.00    21.00   SUV\n134 21.00    21.00   SUV\n135 21.00    21.00   SUV\n136 37.00    37.00    TS\n137 45.00    45.00     M\n138 42.00    42.00     C\n139 40.00    40.00     M\n140 38.00    38.00     C\n141 28.00    28.00     C\n142 21.00    21.00    PT\n143 21.00    21.00    PT\n144 31.00    31.00     M\n145 29.00    29.00     M\n146 26.00    26.00     M\n147 26.00    26.00     M\n148 25.00    25.00     L\n149 25.00    25.00     L\n150 21.00    21.00     L\n151 50.00    95.00     M\n152 43.00   100.00     M\n153 43.00   100.00     M\n154 37.00    98.00     C\n\nhead(hyb, 5) # Take a look at the first 5 observations in the set (you can set the number) \n\n  id                 model year     msrp msrp_dollars accel_rate   mpg mpg_mpge\n1  1      Prius (1st gen.) 1997 24509.74  $24,509.74        7.46 41.26    41.26\n2  2           Tino Hybrid 2000 35354.97  $35,354.97        8.20 54.10    54.10\n3  3      Prius (2nd gen.) 2000 26832.25  $26,832.25        7.97 45.23    45.23\n4  4               Insight 2000 18936.41  $18,936.41        9.52 53.00    53.00\n5  5 Civic Hybrid 1st gen. 2001 25833.38  $25,833.38        7.04 47.04    47.04\n  class\n1     C\n2     C\n3     C\n4    TS\n5     C\n\ntail(hyb, 10) # Look at the last 10 observations (you can set the number)\n\n     id                        model year  msrp msrp_dollars accel_rate mpg\n145 145                         M35h 2013 54750  $54,750.00       19.61  29\n146 146                  E400 Hybrid 2013 55800  $55,800.00       14.93  26\n147 147        ActiveHybrid 5 Series 2013 61400  $61,400.00       12.99  26\n148 148              ActiveHybrid 7L 2013 84300  $84,300.00       18.18  25\n149 149            Panamera S Hybrid 2013 96150  $96,150.00       18.52  25\n150 150                  S400 Hybrid 2013 92350  $92,350.00       13.89  21\n151 151         Prius Plug-in Hybrid 2013 32000  $32,000.00        9.17  50\n152 152  C-Max Energi Plug-in Hybrid 2013 32950  $32,950.00       11.76  43\n153 153 Fusion Energi Plug-in Hybrid 2013 38700  $38,700.00       11.76  43\n154 154               Chevrolet Volt 2013 39145  $39,145.00       11.11  37\n    mpg_mpge class\n145       29     M\n146       26     M\n147       26     M\n148       25     L\n149       25     L\n150       21     L\n151       95     M\n152      100     M\n153      100     M\n154       98     C\nSo, we have quite a few numeric and categorical variables here. We need to know how each of these variables are stored in this data set so we know how to work with them. The following chunk uses the str() function to take a look at how this data set is structured.\nstr(hyb)\n\n'data.frame':   154 obs. of  9 variables:\n $ id          : int  1 2 3 4 5 6 7 8 9 10 ...\n $ model       : chr  \"Prius (1st gen.)\" \"Tino Hybrid\" \"Prius (2nd gen.)\" \"Insight\" ...\n $ year        : int  1997 2000 2000 2000 2001 2001 2002 2003 2003 2003 ...\n $ msrp        : num  24510 35355 26832 18936 25833 ...\n $ msrp_dollars: chr  \"$24,509.74 \" \"$35,354.97 \" \"$26,832.25 \" \"$18,936.41 \" ...\n $ accel_rate  : num  7.46 8.2 7.97 9.52 7.04 9.52 9.71 8.33 9.52 8.62 ...\n $ mpg         : num  41.3 54.1 45.2 53 47 ...\n $ mpg_mpge    : num  41.3 54.1 45.2 53 47 ...\n $ class       : chr  \"C\" \"C\" \"C\" \"TS\" ...\nStarting from the top right, we have a data.frame (a type of data structure) that has 154 observations (the rows) with 9 variables (columns). under this line is an explanation of each of the 9 variables. From left to right, we have the name of the variable, the type, then a short example of the data stored therein. For example, we have an ‘id variable’ stored as an integer (int) which. The “model” variable is stored as a character (chr) variable which indicates that it is stored as text (also known as a string). There is one more variable class you should know which is factor. While characters are text, factors are categories with a set number of possible values.\nNotice the $? The $ is an operator used in R to access different elements in an object. This comes in handy when we want to work with the data and transform it. For example, we may wish to view certain elements of this data frame. Follow the logic in the following chunk.\nclass(hyb$id) # identify the class of data using class()\n\n[1] \"integer\"\n\nhyb$id_chr &lt;- as.character(hyb$id) # change a variable to a character create a new variable with that. \n\nclass(hyb$id_chr)\n\n[1] \"character\"\nOne final thing to note when working with character data is that often you need to convert characters into factors so that R recognises the long list of text as being truly categorical. This actually encodes each unique character as a distinct category recognising all with the same text as sharing a category.\nFor example, the variable ‘class’ is actually categorical. What type of car it is. It is, however, stored as a character. In order to do anything with this variables (say visualising average cost by each category?), we need to convert this into a factor.\nhyb$class &lt;- as.factor(hyb$class)\n\nclass(hyb$class)\n\n[1] \"factor\"\nKeep this trick in your pocket! You are likely going to need this throughout the semester!",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Types and Structures</span>"
    ]
  },
  {
    "objectID": "Data Types and Structures.html#levels-of-data",
    "href": "Data Types and Structures.html#levels-of-data",
    "title": "1  Data Types and Structures",
    "section": "1.2 Levels of Data",
    "text": "1.2 Levels of Data\nWithin a data set you will encounter different variables that are measures at various levels and using different units of measurement. Let’s say, for example, you have some survey data that asks questions about the respondent’s biological sex, income, and how satisfied they are are work. All of these questions are useful, and can be useful in visualisation. However, there are some visualisations that are more appropriate and useful for some of these more than others. In order to properly visualise data, we need to understand data.\nThere are two main ‘umbrella’ terms that you can use when talking about data. These are, categorical and numeric. Categorical data, as the name suggests, are measured in buckets or categories while numeric data use units and numbers. There are a few further distinctions you need to understand before these become useful to you.\n\n\n\n\n\n\nCategorical Data\n\n\n\n\nNominal: These are data with distinct labels that have no quantitative difference between one another.\nE.g. Sex (Male, Female). Race (White, Black, Other).\n\n\nOrdinal: These are data with set differences between each response. These are categorical responses that are ranked in a specific order.\nE.g. Likert Scale (Agree, Neutral, Disagree).\n\n\n\nThere are some other variations of categorical data that are sometimes referred to such as dummy variables (true or false, or 0/1). So, an honorable mention goes to dummy variables!!\nCategorical data will almost always be stored as characters or factors. Alternatively, you might come across encoded versions of categorical data. For example, male and female may be given a numeric code but, we know this to be categorical. So, you must decide what to do. You may want to convert this to a categorical variable, or simply remember what 1 and 0 mean.\nSince there are distinct buckets of information that are stored in categorical data, it is best presented using tables, bar charts or pie charts.\n\n\n\n\n\n\nNumeric Data\n\n\n\n\nInterval: Continuous data that do not have a zero point.\nE.g. Temperature (measured in Farenheit), Time (measured on a 12-hour clock, ACT scores).\n\n\nRatio: Continuous data that have a true zero point.\nE.g. Earnings (dollar amount), Age (measured in years).\n\n\n\nNumeric data all have equal intervals (i.e. one decimal place, or one year, or one degree) which creates a continuous stream of data.\nIn R, numeric data is stored as integer (int) or numeric (num). You may come across data that should be numeric but is stored as categorical or perhaps a character.\n\n1.2.1 Activity - Levels of Data\nLook at the following examples of questions and, with a partner, decide whether the unit of measurement is nominal, ordinal, interval or ratio.\n\nPlease indicate how much you earn a year from your current job: - $0 - $24,999\n\n-   $25,000 - $49,999\n\n-   $50,000 - $74,999\n\n-   $75,000 - $99,999\n\n-   $100,000+\n\nHow much do you earn at your current job (in USD): _____________\nHow likely are you to recommend this product?:\n\nLikely\nNeutral\nUnlikely",
    "crumbs": [
      "Unit 1: Working with Data",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Types and Structures</span>"
    ]
  },
  {
    "objectID": "Line Graphs.html",
    "href": "Line Graphs.html",
    "title": "4  Line Graphs",
    "section": "",
    "text": "4.1 Continuous Data Overtime\nToday we are going through scatter plots drawing from Chapter 4 of Chang’s book.\nI argue, are among the most accessible visualisations. Many visualisations can be ‘noisy.’ By this, I mean visual noise. If there are many dots, many plots, many colours, this can actual confuse more than inform.\nThe main use of line graphs is when you have a continuous variable that you are measuring over time. These usually have the variable of interest on the y axis and time on the x axis.\nggplot(climate, aes(x = Year, y = Anomaly10y)) +\n  geom_line()\nNote the small gap after 1850? This is because there are missing values in our dataset. We could remove these and re plot, but there are further issues with this visual. Take a look at the right side of the graph, notice that there are multiple points at each time period beyond 1850?\nWhen we take a closer look at the dataset, we find out that there are three sources of data in this dataset. This may be the reason why there are multiple observations at these time periods.\nhead(climate)\n\n    Source Year Anomaly1y Anomaly5y Anomaly10y Unc10y\n1 Berkeley 1800        NA        NA     -0.435  0.505\n2 Berkeley 1801        NA        NA     -0.453  0.493\n3 Berkeley 1802        NA        NA     -0.460  0.486\n4 Berkeley 1803        NA        NA     -0.493  0.489\n5 Berkeley 1804        NA        NA     -0.536  0.483\n6 Berkeley 1805        NA        NA     -0.541  0.475\n\nunique(climate$Source)\n\n[1] \"Berkeley\" \"NASA\"     \"CRUTEM3\"\nBelow I use the ‘colour’ option to divide the lines by these sources.\nggplot(climate, aes(x = Year, y = Anomaly10y, colour = Source)) +\n  geom_line()\nYes! There is the culprit! This is a powerful lesson when using line graphs to know your dataset well. If there are multiple points at each time period, a line graph can look very ugly and confusing. Understanding why there are multiple points can help you edit your visual accordingly.\nNow, even this visualisation is a little messy. First, each source line begins at a different time point with Berkeley being the longest. Second, the lines overlap each other quite a bit. If your purpose is to compare these sources, there are a few options to fix these issues.\nFirst, you can limit the x axis to the point at which each source have data. Here I add the xlim() option and limit the left side of the axis at 1890. The NA simply leaves the right side of the axis unaltered. You can add a value there to alter that side as well. This produces a plot that is less distracting making it easier to compare these sources.\nggplot(climate, aes(x = Year, y = Anomaly10y, colour = Source)) +\n  geom_line() + \n  xlim(1890, NA)\nSecond, you may wish to pull each of these sources out into separate plots and present them side-by-side. To do this, we can use the facet_grid() option from ggplot2. The facet_grid() option uses a categorical variable (like our source of data) to separate the data by these categories. This will pull each line into a plot and present it. I also use the theme() option to remove the legend that we normally see because of the line colour option we used. If you don’t add this, then you will see a legend on the plot. This, however, is redundant because each facet is titled by the source name.\nggplot(climate, aes(x = Year, y = Anomaly10y, colour = Source)) +\n  geom_line() + \n  xlim(1890, NA) +\n  facet_grid(~ Source) +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Line Graphs</span>"
    ]
  },
  {
    "objectID": "Line Graphs.html#the-relationship-between-two-variables",
    "href": "Line Graphs.html#the-relationship-between-two-variables",
    "title": "4  Line Graphs",
    "section": "4.2 The Relationship Between Two Variables",
    "text": "4.2 The Relationship Between Two Variables\nOne lesser-known use of line graphs is to plot the relationship between two variables. However, a key caveat is that line graphs should only be used in this context when there is a single observation for each point along the x-axis. If there are multiple observations for a given x-value, a scatter plot is generally more appropriate.\nHere is an example. We are using the tg dataset which measures the tooth length of guinea pigs who were given doses of different medicines. Here we can graph the relationship between the dose amounts and the tooth length. But, there are two points at a few of the x-values.\n\nggplot(tg, aes(x = dose, y = length)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\n\nhead(tg)\n\n  supp dose length\n1   OJ  0.5  13.23\n2   OJ  1.0  22.70\n3   OJ  2.0  26.06\n4   VC  0.5   7.98\n5   VC  1.0  16.77\n6   VC  2.0  26.14\n\n\nWhen we look closer at the dataset, it looks like there are two groups, those that received an orange juice supplements or vitamin C supplements.",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Line Graphs</span>"
    ]
  },
  {
    "objectID": "Line Graphs.html#activities",
    "href": "Line Graphs.html#activities",
    "title": "4  Line Graphs",
    "section": "4.3 Activities",
    "text": "4.3 Activities\nSo, what can you do to visualise this and create an appropriate line graph?* Consider using the linetype, shape, or color options in the aes() functions.\nThere are also other versions of line graphs that Chang provides instruction on.\n\n4.3.1 4.6\n\nLine graphs with shaded area.\n\n\n\n4.3.2 4.7\n\nStacked area graphs. CAUTION - Not easy to interpret.\n\n*My Answer\n\nggplot(tg, aes(x = dose, y = length, linetype = supp, shape = supp, colour = supp)) +\n  geom_line(size = 0.25) +\n  geom_point(size = 3)",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Line Graphs</span>"
    ]
  },
  {
    "objectID": "Scatterplots.html",
    "href": "Scatterplots.html",
    "title": "5  Scatter Plots",
    "section": "",
    "text": "5.1 Activity\nToday we are going through scatter plots drawing from Chapter 5 of Chang’s book. Here, I add a few comments for you to consider in addition to Chang’s comments.\nScatter plots are most useful if you have two variables in your dataset that are continuous. This is to say, they are both numeric data. A scatter plot positions one of the variables on the x axis of the graph and the other on the y axis. Each observation (unique row) is represented as a dot in the graph on the coordinates of their x and y axes.\nHere, we use the heigthweight dataset from the package “gcookbook” that Chang provides. We plot the height of the respondents alongside their age. To do this, we follow the ggplot2 formula: use the ggplot() function, tell R which dataset we are using (in this case, the heightweight), setting a basic aesthetic, then telling R what type of plot to produce. For scatter plots, we use geom_point() - the dots I mentioned above.\nIf each point represents an individual, what are some conclusions that you can draw from this? Is there a relationship between age and height in this dataset?\nThere are ways we can enhance this visual to make the relationship clearer. One approach is to highlight the density contours of the data. The contours from stat_density2d() represent estimated regions of equal point density. Smaller and tighter contours—or darker filled regions when using geom = “polygon” with a fill aesthetic—generally indicate areas where data points are more densely clustered. This is similar to how contour lines on a topographic map represent changes in elevation.\nAn alternate version of this is to use the fill.\nWe can enhance a scatter plot to better visualize the relationship between two variables by adding a regression line (or line of best fit). This line represents the best-fitting linear relationship that explains the variation between the variables. If there is a positive relationship, the line will slope upward, indicating that one variable tends to increase as the other does. Conversely, a negative relationship will result in a downward-sloping line—for example, if older individuals tended to be shorter.\nWhat does this plot say about the relationship between height and age in this dataset? Note, the grey area surrounding the line? This is a confidence interval denoting that we can be 95% sure that the true line of best fit lies within those margins.\nFinally, we can use some further characteristics about these individuals to filter the dataset and provide even more information. In this instance, we have the repsondent’s sex. Here, we use the ‘color’ option in the aesthetic argument to change the colour of the points to match the observation’s sex.\nAlternatively, you can change the point shapes to reflect the same thing. This is an important thing to consider when visualising data. You want to enable all to interpret your data. Therefore, considering not everyone can see colours, it may be best to also change the shape. Here I use the ‘shape’ option to show one shape for male and another for female.\nNow we can fit the same line of best fit as we did before but have a separate line for men and women.\nWhat can you conclude from this plot about how the relationship between height and age differs for men and women?\nIf the points are distracting, you can just plot the line of best fit. I have also removed the confidence intervals using the se = False.\nAlternatively, you can use the facet_grid() argument to split the plot into two plots based on the sex variable.\nFinally, you can create a scatter plot matrix to demosntrate the pairwise relationship of multiple variables in your dataset. Please note, I think the utility of these visualisations are limited. Their main usage is to you the data scientist to take a quick look at pairwise associations (two variables) in your dataset. I strongly advise you ti create simpler plots for clients (or stakeholders).\nScatter plot matrices present the paired associations between all of the variables in a dataset. Here, for simplification, I am going to create a subset of the heightweight dataset that Chang’s book provides us with.\nI use the head() function to look at the top rows of the dataset. This reveals that we have age in months and years. I am going to remove one of these and use the pairs() function to create a a scatter plot matrix.\nThe select() function enables you to pull select a subset of variables in the dataset. Using the minus sign drops that variable - in this case, adeMonth.\nNow we can plot our pairwise scatter plot matrix. These are a little funky when you first see them, so take some time to learn this.\nTake a look at this matrix and you will see in the central diagonal cells the names of the variables that we have in our dataset. This diagonal acts as a sort of mirror for the visualisation. Since scatter plots are inherently pairwise visualisations, we interpret each “cell” in this matrix, each plot as a pairwise depiction of the variables on the diagonal.\nFor our purposes, let’s name the rows in this matrix 1-4 (top to bottom) and the columns A-D (left to right). In this plot cell 1A has the variable sex. Cell 1B Therefore has the scatter plot of ageyear (in cell B2) and sex (1A). Age is on the x axis while sex is on the y. Cell 2C, then, shows the scatter plot between age and height (the one we have been looking at so far). Finally, 3D shows the scatter plot of height and weight. Following this logic, then What is represented in cell 1C?\nSex is on the y axis and height in on the x axis. The left side of this matrix, “under” the diagonal, is just the reverse of what we have discussed with the axes flipped.\nIs this starting to make sense? Spend some time now to familiarise yourself with this and describe with a partner the apparent association between each of the pairs (don’t worry about the sex variable).\nChang adds some more insight into what you can do with scatter plots. From the following recipes in Chapter 5, select one or two and discuss their utility with a partner.",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Scatter Plots</span>"
    ]
  },
  {
    "objectID": "Scatterplots.html#activity",
    "href": "Scatterplots.html#activity",
    "title": "5  Scatter Plots",
    "section": "",
    "text": "5.1.1 5.3\n\nAlternative point shapes\n\n\n\n5.1.2 5.4\n\nYou want to show even more in this plot. You Can plot another continuous variable to the colour or the size of the points.\n\n\n\n5.1.3 5.5\n\nWhat to do if you have a scatter plot with many overlapping points? - Note, this recipe uses a different dataset (diamonds).\n\n\n\n5.1.4 5.6\n\nYou want to plot a regression line on a scatter plot but with a binary variable (0, 1).",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Scatter Plots</span>"
    ]
  },
  {
    "objectID": "Beyond Static Visualisation.html",
    "href": "Beyond Static Visualisation.html",
    "title": "6  Beyond Static Visualisation",
    "section": "",
    "text": "6.1 Interactive Plots\nSo far, we have generated static and dynamic plots which make for some nice visualisations. However, we may wish to make some interactive visualisations. Interaction can be a useful tool in visualisation because it gets people involved with the data directly. There are many packages that can do this. The most basic serves as an extension of ggplot2, is pltoly. Let’s return to our paired down coffee scatter plot and make this interactive.\ncoffee &lt;- read.csv(file.choose())\n\ncoffee_small &lt;- coffee %&gt;%\n  filter(Location.Country == c(\"Mexico\", \"Colombia\")) %&gt;%\n  select(Location.Country, Year, Data.Scores.Aroma, Data.Scores.Flavor)\nNo we can recreate the plot we generated showing the relationship between aroma and flavour across two countries - Mexico and Colombia. To make a plot interactive, simply setup your ggplot2 syntax, store it as an object, then plot using ggplotly(). Now, hover over each point and you will see that each observation has a label indicating the scores and which location the are from. At the top of the plot window there are some other options like zooming in and out, panning around, or highlighting a section of the plot.\ncoff &lt;- ggplot(coffee_small, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor, colour = Location.Country)) +\n  geom_point() \nggplotly(coff)\nDesnity plots……………\ncof_dens &lt;- ggplot(coffee_small, aes(x = Data.Scores.Flavor, colour = Location.Country, fill = Location.Country)) +\ngeom_density(alpha = 0.25) \n\nggplotly(cof_dens)\nThis provides an interactive way for your constituents to engage with your data. Let’s look at some other examples and explore their uses. The syntax and logic is the same for boxplots. I think these are among the most useful when interactive. Comparing two groups side-by-side is not always very easy to do without a ruler to see where each element of the distribution fits along the y-axis. However, when I however over the boxes, I can see the numeric values and easily compare those across groups.\ncof_box &lt;- ggplot(coffee_small, aes(x = Location.Country, y = Data.Scores.Flavor, color = Location.Country)) +\ngeom_boxplot() \n  \nggplotly(cof_box)",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Beyond Static Visualisation</span>"
    ]
  },
  {
    "objectID": "Beyond Static Visualisation.html#dynamic-plots",
    "href": "Beyond Static Visualisation.html#dynamic-plots",
    "title": "6  Beyond Static Visualisation",
    "section": "6.2 Dynamic Plots",
    "text": "6.2 Dynamic Plots\nYou may need to make some dynamic plots that move with time or another category. This vignette is designed to spark some of your imagination on a few different types of plots. First, we are going to use the ‘gganimate’ package which is an extension of ggplot designed to create dynamic plots.\nThe package gganimate will work with most plots. I encourage you to think about the uses of having dynamic plots. Some plots make more sense than others to make dynamic. For now, though, let’s take a look at some scatterplots. There are two main uses of dynamic scatter plots, say you want to demonstrate the relationship between two variables over time, or perhaps, across different groups. You can do so using gganimate’s transition_time() and transition_state() arguments.\nWe will be using the coffee dataset for these examples.\n\ncoffee &lt;- read.csv(file.choose())\ncolnames(coffee)\n\n [1] \"Location.Country\"               \"Location.Region\"               \n [3] \"Location.Altitude.Min\"          \"Location.Altitude.Max\"         \n [5] \"Location.Altitude.Average\"      \"Year\"                          \n [7] \"Data.Owner\"                     \"Data.Type.Species\"             \n [9] \"Data.Type.Variety\"              \"Data.Type.Processing.method\"   \n[11] \"Data.Production.Number.of.bags\" \"Data.Production.Bag.weight\"    \n[13] \"Data.Scores.Aroma\"              \"Data.Scores.Flavor\"            \n[15] \"Data.Scores.Aftertaste\"         \"Data.Scores.Acidity\"           \n[17] \"Data.Scores.Body\"               \"Data.Scores.Balance\"           \n[19] \"Data.Scores.Uniformity\"         \"Data.Scores.Sweetness\"         \n[21] \"Data.Scores.Moisture\"           \"Data.Scores.Total\"             \n[23] \"Data.Color\"                    \n\n\nFirst, we will take a look at the relationship between flavour and aroma.\n\nggplot(coffee, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor)) +\ngeom_point() \n\n\n\n\n\n\n\n\nThere appears to be a linear relationship between these two variables. As aroma increases, so too, does the flavour of the coffee. However, we can tell more of a story here using the longitudinal nature of the data and the locations from where the coffee is sourced.\nAdditionally, we may want to remove the single point from our visual. We can do that by changing the limit the axes or removing that outlier. For now, we will simply change the limits of the plot.\nFirst, let’s show this association over time by using the transition_time() argument associated with gganimate. We select the ‘Year” variable which is, in this dataset, the time indicator. We also use the labs() option to add a title (the year) and the ’linear’ option for a smooth transition between years. Note, this plot might take a short while to visualise.\n\nggplot(coffee, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor)) +\ngeom_point() +\n  xlim(6.5, NA) +\n  ylim(5, NA)+  \n  transition_time(Year) +\n  ease_aes('linear') + \n  labs(title = 'Year: {frame_time}')\n\n\n\n\n\n\n\n\nWhat does this plot tell you?\nNext, we may wish to demonstrate if the observed relationship between aroma and flavour is the same across locations. We have an indicator showing which country from which the coffee is sourced. Here, then, we don’t have a ‘time’ variable, but our third variable of interest is the location. This is a categorical variable indicating which country the coffee is sourced from. Thus, we use the transition_states() argument and set it to the ‘Location.Country’ variable. This provides a scatter plot that rotates through the points of each location.\n\nggplot(coffee, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor)) +\ngeom_point() +\n  xlim(6.5, NA) +\n  ylim(5, NA)+  \n  transition_states(Location.Country) +\n  ease_aes('linear') +\n  labs(title = 'Country: {closest_state}')\n\n\n\n\n\n\n\n\nIn order to save these use the anim_save() function and save them as a .gif so you can put it on a poster or website.\n\nanim_save(\"Flavour_Aroma_Locations.gif\")\n\nYou may wish to combine some skills here. You may want to show the relationship over time across these locations. To do so, you can use the facet() option you have used before!\nIn this dataset, we have a lot of locations and so many facet windows - probably too many to visualise properly. So, I create a small subset of this dataset to pull a few locations and keep these focal variables.\n\ncoffee_small &lt;- coffee %&gt;%\n  filter(Location.Country == c(\"Mexico\", \"Colombia\")) %&gt;%\n  select(Location.Country, Year, Data.Scores.Aroma, Data.Scores.Flavor)\n\nNow we can create our plot!\n\nggplot(coffee_small, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor)) +\ngeom_point() +\n  xlim(6.5, NA) +\n  ylim(5, NA)+  \n  facet_grid(~Location.Country) +\n  transition_time(Year) +\n  ease_aes('linear') + \n  labs(title = 'Year: {frame_time}') \n\n\n\n\n\n\n\n\nNotice that the plots move a little quickly? A little too quickly? There are a few ways to deal with this, the simplest is to use the animate function since its options are intuitive. To do this, you need to store the plot as an object. Then, using the nframes and fps options, we can reduce the speed. nframes is the total number of frames and fps is frames per second. Higher frames + lower fps = longer and smoother animation.\n\nanim &lt;- ggplot(coffee, aes(x = Data.Scores.Aroma, y = Data.Scores.Flavor)) +\n  geom_point() +\n  xlim(6.5, NA) +\n  ylim(5, NA) +  \n  transition_states(Location.Country) +\n  ease_aes('linear') +\n  labs(title = 'Country: {closest_state}')\n\nanimate(anim, nframes = 200, fps = 5)",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Beyond Static Visualisation</span>"
    ]
  },
  {
    "objectID": "Cleaning and Annotating.html",
    "href": "Cleaning and Annotating.html",
    "title": "7  Cleaning and Annotating",
    "section": "",
    "text": "8 Titles\nThere are three things you need to learn about titles. First, how to alter them using the labs() option. Second, how to change their presentation (size etc.). Third, the substantive utility of titles on graphs.\nBellow I demonstrate code using a moderated version of the hybrid cars dataset. I present two versions of the graph to demosntrate differences in substance. You may wish to have descriptive titles that describe what the chart shows. Or you may wish to have narrative-based titles that describe what the chart shows.\nDescriptive Title:\nggplot(class_costs, aes(x = class, y = cost)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Average Price by Car Class\", x = \"Car Class\", y = \"Average Cost\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    axis.text = element_text(size = 12))\nNarrative Title:\nggplot(class_costs, aes(x = class, y = cost)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Luxury Hybrids are Most Expensive\", x = \"Car Class\", y = \"Average Cost\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    axis.text = element_text(size = 12))",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning and Annotating</span>"
    ]
  },
  {
    "objectID": "Cleaning and Annotating.html#swapping-axes",
    "href": "Cleaning and Annotating.html#swapping-axes",
    "title": "7  Cleaning and Annotating",
    "section": "9.1 Swapping Axes",
    "text": "9.1 Swapping Axes",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning and Annotating</span>"
    ]
  },
  {
    "objectID": "Cleaning and Annotating.html#changing-order-of-bar-chart-items",
    "href": "Cleaning and Annotating.html#changing-order-of-bar-chart-items",
    "title": "7  Cleaning and Annotating",
    "section": "9.2 Changing order of Bar Chart Items",
    "text": "9.2 Changing order of Bar Chart Items",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning and Annotating</span>"
    ]
  },
  {
    "objectID": "Cleaning and Annotating.html#colour-blind-palets",
    "href": "Cleaning and Annotating.html#colour-blind-palets",
    "title": "7  Cleaning and Annotating",
    "section": "11.1 Colour Blind Palets",
    "text": "11.1 Colour Blind Palets",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cleaning and Annotating</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSA 202: Introduction to Data Visualisation",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Categorical Data.html",
    "href": "Categorical Data.html",
    "title": "3  Categorical Data",
    "section": "",
    "text": "3.1 Basic Bar Chart\nggplot(hybrid, aes(x = class)) +\n  geom_bar()\nHowever, this basically serves as a histogram, counting the number of cars in each class type. We may want to so something a little bit more than that. For example, we might want to show the average price of each class of car. to do this, we nee to transform our data a bit. We have mrsp for each car. So, to get the average cost of each class of car, we need to group the data by the class and then get the average cost by that class. Follow the logic of the next chunks of code and look at what the plot tells you.\nclass_costs &lt;- hybrid %&gt;%\n  group_by(class) %&gt;%\n  summarise(cost = mean(msrp, na.rm = TRUE)) %&gt;%\n  ungroup()\nggplot(class_costs, aes(x = class, y = cost)) +\n   geom_col(fill = \"steelblue\", color = \"black\") +\n  theme_minimal()",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Categorical Data</span>"
    ]
  },
  {
    "objectID": "Categorical Data.html#intermediate-bar-graphs",
    "href": "Categorical Data.html#intermediate-bar-graphs",
    "title": "3  Categorical Data",
    "section": "3.2 Intermediate Bar Graphs",
    "text": "3.2 Intermediate Bar Graphs\nHere, we are going to further transform th data to demonstrate some more uses of bar charts. You want to present a bar chart sowing the number of cars in each class by their fuel efficiency.\nFirst, we need to create a categorical variable indicating a a ranking of how fuel efficient the car is. Here, I create three tiers, low (less than 20), medium (20-30) and high (above 30).\n\nhybrid &lt;- hybrid %&gt;%\n  mutate(mpg_tier = case_when(\n    mpg &lt; 20 ~ \"Low (&lt;20)\",\n    mpg &gt;= 20 & mpg &lt;= 30 ~ \"Medium (20–30)\",\n    mpg &gt; 30 ~ \"High (&gt;30)\"\n  ))\n\nYou may want to show the contribution that individual groups make to the total, in this instance, you can use a stacked bar chart. In this case, the stacked bar\n\nggplot(hybrid, aes(x = class, fill = mpg_tier)) +\n  geom_bar() \n\n\n\n\n\n\n\n\nWhat types of things do you see here?\nThis visualiation can be cleaned a little further by adding boundaries around each group. You can also flip the axes to increase readability.\n\nggplot(hybrid, aes(x = class, fill = mpg_tier)) +\n  geom_bar(color = \"black\") + \n  coord_flip()\n\n\n\n\n\n\n\n\nFinally, one slight alteration of stacked bar graphs is to scale the y axis to a percentage where 1 = 100% of the total observed at each level of the X axis (note that this total might be different in terms of raw count). This way, each stack of the bar graph represents the proportion of that whole. This is ONLY appropriate if you don’t need to show the count, but care more about the proportion of the total. I.e. the growth in the presence of one category compared to another. This could be missleading since the stacked bars appear to be the same “height” at each category of the X axis. Meanwhile, we know from the above bar graphs that the total (in terms of a count) changes at each category of the X axis.\nThese are best interpreted when the focus is on relative composition within categories, rather than absolute differences in size. They are particularly useful when comparing how the distribution of subgroups (e.g., MPG tiers) changes across another variable (e.g., car class), while disregarding the total count in each category. However, care should be taken in interpretation: because all bars are scaled to the same height, it can obscure the fact that some groups are much larger than others in absolute terms. If readers misinterpret the chart as representing both proportion and quantity, it can lead to false conclusions.\n\nggplot(hybrid, aes(x = class, fill = mpg_tier)) +\n  geom_bar(position = \"fill\", colour = \"black\") +\n  coord_flip()\n\n\n\n\n\n\n\n\nStacked bar charts are a good tool to have in your toolkit. However, they aren’t always the most intuitive to interpret. Especially if you have more categories than two. In this case, you have three categories. So, if your stacked bar chart is not easy to read, you might decide to place the bars next to each other. This will present three mpg tiers for each class of car.\n\nggplot(hybrid, aes(x = class, fill = mpg_tier)) +\n  geom_bar(position = \"dodge\", colour = \"black\")",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Categorical Data</span>"
    ]
  },
  {
    "objectID": "Categorical Data.html#pie-and-donut-charts",
    "href": "Categorical Data.html#pie-and-donut-charts",
    "title": "3  Categorical Data",
    "section": "3.3 Pie and Donut Charts",
    "text": "3.3 Pie and Donut Charts\nYou might be tempted to mock up a quick pie chart when you have categorical data. You can do this in ggplot2. However, don’t. Pie charts are criticised because humans cannot differentiate angles very well. Each segment relies on differentiating from others by their size. If you must make a pie chart, then add the numbers so people can trick themselves that they always knew the segment with 11 is bigger than the segment with 9!\n\nclass_counts &lt;- hybrid %&gt;%\n  count(class)\n\nggplot(class_counts, aes(x = \"\", y = n, fill = class)) +\n  geom_col(color = \"black\") +\n  geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +\n  coord_polar(theta = \"y\") +\n  theme_void()\n\n\n\n\n\n\n\n\nBar charts are always prefferable. However, if you like the circular vibe consider a donut chart. This is a sort of pie char/bar chart hybrid. Still, not the clearest. To do this, you need to create a variable that demonstrates the hole side (the bigger the number, the larger the hole).\n\nhole &lt;- 5\nclass_counts &lt;- class_counts %&gt;% \n  mutate(x = hole)\n\nggplot(class_counts, aes(x = hole, y = n, fill = class)) +\n  geom_col(color = \"black\") +\n  coord_polar(theta = \"y\") +\n   geom_text(aes(label = n),\n            position = position_stack(vjust = 0.5)) +\n  xlim(c(0.2, hole + 0.5)) + \n  theme_void()",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Categorical Data</span>"
    ]
  },
  {
    "objectID": "Categorical Data.html#activities",
    "href": "Categorical Data.html#activities",
    "title": "3  Categorical Data",
    "section": "3.4 Activities",
    "text": "3.4 Activities\n\n3.5 - Negative and Positive Values",
    "crumbs": [
      "Unit 2: Visualising Data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Categorical Data</span>"
    ]
  },
  {
    "objectID": "Networks.html",
    "href": "Networks.html",
    "title": "9  Networks",
    "section": "",
    "text": "9.1 Edgelists\nNetwork data can be stored as edgelists or adjacency matrices. We will go through one then the other. Finally, we will work on some basic visualisations using a package called ggraph.\nYour data may be stored as an edgelist. An edgelist is what it says, a list of edges or relationships that exist between the nodes in your network. Since these are edges between nodes, the data are stored in a dyadic format (pairs).\nSplit across two columns you have the names of everyone in the network that share a connection. The basic format for any edgelist is to have a ‘from’ and a ‘to’ column. The titles of the columns are arbitrary, but are helpful for you as the researcher, especially if the connection is directed. You may wish to call the columns ‘sender’ and ‘receiver.’\nThis code chunk shows how to read in a .csv that is formatted as an edgelist. Note, the header = TRUE option tells R that the first row are headers (column names). Using the head() command, we see the first lines of these network data.\nThis is a network of romantic affiliations based on students from the Harry Potter saga. Note the column names reflect this.\nmy_edge &lt;- load_data(\"Hogwarts Crushes Edgelist.csv\", header = TRUE)\n\nhead(my_edge)\n\n           Crusher            Crush\n1     Harry Potter    Ginny Weasley\n2     Harry Potter        Cho Chang\n3      Ron Weasley Hermione Granger\n4 Hermione Granger      Ron Weasley\n5      Ron Weasley   Lavender Brown\n6    Ginny Weasley     Harry Potter\nThis network is directed. These are individuals who have romantic feeling for others in the storyline of Harry Potter. Romantic ties, may not be reciprocated (poor Snape!). As you look through this network, you can see the ties that exist. Take a look at the first six rows above, Harry ‘sends’ to Ginny, he also sends to Cho. You could look through the whole dataset and identify where the ties exist and who sends to whom!",
    "crumbs": [
      "Unit 3: Alternative Data Types",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Networks</span>"
    ]
  },
  {
    "objectID": "Networks.html#adjacency-matrices",
    "href": "Networks.html#adjacency-matrices",
    "title": "9  Networks",
    "section": "9.2 Adjacency Matrices",
    "text": "9.2 Adjacency Matrices\nYour data may be stored as an adjacency matrix. An adjacency matrix is a datasheet that uses a numerical system (usually a binary system 0 and 1 for unweighted networks) to denote the ties that exist between cells in the spreadsheet. 0 indicates no tie and 1 indicates a tie. In a weigted network, the number may be higher than 1 (i.e. to indicate the number of interactions, the distance, or other weight).\nThe most important element of an adjacency matrix is that the first row and the first column have the list of nodes. Each cell is an individual node and this node is mirrored on the other side of the matrix. For example, cell A2 is the same as B1. These two lines (the first row and column) must have the same names in them in order for R to recognise it as a network. In other words, an adjacency matrix has all the possible dyads (pairs) in the network with 1s and 0s to indicate whether they share a tie. Note that A1 should always be left empty.\nOne final characteristic of an adjacency matrix is the line where the same cell overlaps. This is called the diagonal. Cell A2 and B1 are the same name, the coordinates whether those cells meet (B2) can indicate whether that node is connected to itself. The same is true all the way down the diagonal of the matrix. The researcher (YOU) must decide whether self loops/ties make sense given the characteristics/parameters of the network when you collect network data. For example, in a network of sending text messages, it may not make sense.\nThis code chunk shows you how to bring in a .csv with network data stored as an adjacency matrix. These data are the same data as before - crushes between Harry Potter Characters. Note, the row.names = 1 option is used here to ensure R recognises row 1 as names not connections.\n\nmy_adj  &lt;- load_data(\"Hogwarts Crushes matrix.csv\", row.names=1)\n\nhead(my_adj)\n\n                 Harry.Potter Ron.Weasley Hermione.Granger Ginny.Weasley\nHarry Potter                0           0                0             1\nRon Weasley                 0           0                1             0\nHermione Granger            0           1                0             0\nGinny Weasley               1           0                0             0\nLily Potter                 0           0                0             0\nJames Potter                0           0                0             0\n                 Lily.Potter James.Potter Severus.Snape Nymphadora.Tonks\nHarry Potter               0            0             0                0\nRon Weasley                0            0             0                0\nHermione Granger           0            0             0                0\nGinny Weasley              0            0             0                0\nLily Potter                0            1             0                0\nJames Potter               1            0             0                0\n                 Remus.Lupin Lavender.Brown Cho.Chang Cedric.Diggory\nHarry Potter               0              0         1              0\nRon Weasley                0              1         0              0\nHermione Granger           0              0         0              0\nGinny Weasley              0              0         0              0\nLily Potter                0              0         0              0\nJames Potter               0              0         0              0",
    "crumbs": [
      "Unit 3: Alternative Data Types",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Networks</span>"
    ]
  },
  {
    "objectID": "Networks.html#making-network-objects",
    "href": "Networks.html#making-network-objects",
    "title": "9  Networks",
    "section": "9.3 Making Network Objects",
    "text": "9.3 Making Network Objects\nNow we know how network data are stored, there are a couple of steps we need to take before we can get analysing our networks. In short, we need to convert our edgelist or adjacency matrix into a network using some functions that the igraph package provides. Let’s start with edgelists and then move on to adjacency matrices.\nOur edgelist is very simple to convert into a network. First, we will need to tell R that the commands we are running from here on are igraph. So in this next chunk we will use the library() command to let R know.\nIn the next line, we use the graph_from_data_frame() function from igraph to create an object called g1 which is our first network.\nFor an adjacency matrix, things are slightly different. At the moment, our object ‘my_adj’ looks like a matrix, it has the 1s and 0s, but R recognises it as a table. We need to create an object that R recognises is a matrix. In short, R needs to recognise the 1s as ties and the 0s as the lack of ties.\nSo, you will notice in the chunk below there are two steps instead of just one. The first, we use the as.matrix() function to create a new object called ‘mat’ (call these whatever you want) that now has the same information as ‘my_adj’ but now stored as a matrix. Next, we use the graph_from_adjaency_matrix() function to convert this matrix into what R recognises as a network and create g2.\n\n# Edgelists\ng1 &lt;- graph_from_data_frame(my_edge, directed = TRUE)\n\n# Adjacency Matrices\nmat &lt;- as.matrix(my_adj) #Creates an object R recognises as a matrix not a table. \ng2 &lt;- graph_from_adjacency_matrix(mat, mode = 'directed', diag = FALSE)\n\nGreat, now we have our network objects! Let’s understand what these networks look like. They will look exactly the same because they represent the same ties. So, let’s look at g1 and understand how igraph stores networks. To view it, we simply name the object. I want to draw your attention to a few places. It lists it as an igraph object, a network. The DN means directed network. Then it lists 12 and 15. These are how many nodes and how many edges there are in the network. The second line lists all the attributes R can recognise from the network we pulled in (there are all kinds of information we could have about the people and their relationships). In this case, we have their names and that is it. Then it lists the edges that exist between the individuals in this network. Notice that the link between them looks like an arrow -&gt;? If this was an undirected network, the link would look like this –.\n\ng1\n\nIGRAPH 811c820 DN-- 12 15 -- \n+ attr: name (v/c)\n+ edges from 811c820 (vertex names):\n [1] Harry Potter    -&gt;Ginny Weasley    Harry Potter    -&gt;Cho Chang       \n [3] Ron Weasley     -&gt;Hermione Granger Hermione Granger-&gt;Ron Weasley     \n [5] Ron Weasley     -&gt;Lavender Brown   Ginny Weasley   -&gt;Harry Potter    \n [7] Lily Potter     -&gt;James Potter     James Potter    -&gt;Lily Potter     \n [9] Severus Snape   -&gt;Lily Potter      Nymphadora Tonks-&gt;Remus Lupin     \n[11] Remus Lupin     -&gt;Nymphadora Tonks Lavender Brown  -&gt;Ron Weasley     \n[13] Cho Chang       -&gt;Cedric Diggory   Cho Chang       -&gt;Harry Potter    \n[15] Cedric Diggory  -&gt;Cho Chang       \n\n\n\nggraph(g1) +\n  geom_edge_link(color = \"darkgrey\") +  \n  geom_node_point(color = \"firebrick1\", size = 4) +\n   geom_node_text(aes(label = name)) +\n  theme_void()",
    "crumbs": [
      "Unit 3: Alternative Data Types",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Networks</span>"
    ]
  },
  {
    "objectID": "Networks.html#interactive-network-visualisation",
    "href": "Networks.html#interactive-network-visualisation",
    "title": "9  Networks",
    "section": "9.4 Interactive network Visualisation",
    "text": "9.4 Interactive network Visualisation\nYou might want to use interactive\n\ng1_3d &lt;- graphjs(g1)\n\ng1_3d\n\n\n\n\n\nThere are a few things you can do to make this visual a little bit more useful.\n\ng1 &lt;- set_vertex_attr(g1, \"color\", value = ifelse(betweenness(g1) &gt; 1, \"red\", \"ivory\"))\n\nV(g1)$size &lt;- 3\n\ng1_3d &lt;- graphjs(g1, main= \"Harry Potter Romantic Network Red Nodes = Betweenness &gt;1\", bg = \"black\")\n\ng1_3d",
    "crumbs": [
      "Unit 3: Alternative Data Types",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Networks</span>"
    ]
  },
  {
    "objectID": "Networks.html#activity",
    "href": "Networks.html#activity",
    "title": "9  Networks",
    "section": "9.5 Activity",
    "text": "9.5 Activity\nCreate your own network and bring the data in using read.csv(file.choose()). Convert it into a network object and then visualise it.",
    "crumbs": [
      "Unit 3: Alternative Data Types",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Networks</span>"
    ]
  }
]